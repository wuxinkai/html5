【1.transform的rotate】
rotate可以单独设置x或y的角度；
例：transform: rotateY(180deg);

【2.css3中的动画时间】
动画时间可以设置小数：
例：transition: all 0.5s;

【3.css3的内减模式】
给盒子设置了实体化之后，再设置padding或者border的时候，会把盒子撑大，如果想让盒子保留原来的大小，之前的书写方式是：给宽高相对应的缩小；现在可以用css3的内减模式去做：   box-sizing: border-box;  加了这句话之后 就不用每次加完padding再想着去缩小width和height的值了

【4.css3的背景色渐变】
background: linear-gradient(角度,色值 百分比,色值 百分比......) ;
例:background: linear-gradient(180deg,#f64 0%,#f40 50%,#f20 100%);

【5.终端宽度的检测】
1.大公司（财大气粗）device.js 使用此类库去判断屏幕的大小
2.jquery去判断
3.css3的媒体查询功能去判断

【6.页面跳转】
window.location="写要跳转的地址即可"
例： =“http://www.baidu.com”
注意：如果要跳转到外网，一定要加http://，如果跳转的是本地文件，那直接写路径即可

【7.大公司去检测屏幕大小】
device类库去判断的，至于它这个js类库的使用方法，还是要去参考api（说明书），
.mobile()、.windows()、.ipad()  分别判断的三种不同设备，如果返回值是true，代表当前判断为真，返回false，代表判断为假

【8.jq的resize事件】
resize事件：只要窗口被缩放或放大了哪怕只有1px，也会被执行一次代码，我们可以利用这个事件，来动态的检测当前窗口的大小，从而改变css样式

【9.css3的媒体查询功能检测页面宽度】
书写格式：
@media (条件) { 条件成立的时候执行的代码 }
例：@media (max-width:639px) { 代码  }
注意：我们只需要判断3种设备即可
1.pc端：  min-width: 980px  因为pc的宽度可以无穷大，所以我们只需要设置最小值即可
2.pad端： max-width: 640px   min-width: 980px     这需要写区间范围
3.手机端：max-width: 640px     手机端可以是无穷小的 所以我们只需要判断最大值640即可
注意：单位px的后面千万别加分号结束；在写范围的时候，数值不能出现重合的部分

【10.外联式写法】
在link标签中写   media=""  双引号中的判断条件跟之前内嵌样式的写法一样；
例： <link media="(max-width:640px)" src="mobile.css" />
注意：单位后面没分号，数值之间不能重合

【11.拓展】
在写代码的时候，我们目前为止都是针对屏幕的设备去写的，总有一天，会出现没有屏幕，而需要写css3代码的情况出现，为了未雨绸缪，我们在写代码的时候， 要先加一句限定条件： screen 
例：media="screen and (max-width:640px)"
注意：这是为了今天代码的兼容性考虑

【12.判断设备宽度的三种方法优缺点】
1.device.js    大公司使用的方法，利用页面跳转去实现的响应式
2.jquery的resize方法： 兼容性最好，但是跟css3的方法比起来，速度稍慢
3.css3的媒体查询方法：最新的技术，兼容性差一些，但是运行速度最快
使用场景：如果你的项目，不需要兼容ie低版本，那么我们一定要使用css3的媒体查询功能去实现响应式;

【13.最小宽、最小高、最大宽、最大高】
在css3标准中，可以设置最小宽和最小高
min-width、min-height 、max-height、max-width

【14.定时器中$(this)】
在定时器代码中，如果出现$(this),那它只能代表当前这个定时器，而不能代表用户选中的那个元素，
如果在定时器中使用$(this)：  在定时器代码之前，就把$(this)存储在一个变量中，这样的话，在定时器代码中使用这个变量，就相当于使用的是$(this)

